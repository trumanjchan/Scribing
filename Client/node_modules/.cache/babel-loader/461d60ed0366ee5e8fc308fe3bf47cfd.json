{"ast":null,"code":"var _jsxFileName = \"/Users/trumanchan/scribing/Client/src/Pages/Multiplayer/Multiplayer.js\",\n    _s = $RefreshSig$();\n\nimport React, { useEffect, useMemo, useState, useRef } from \"react\";\nimport Navbar from '../../Components/Navbar/Navbar';\nimport socketIOClient from \"socket.io-client\";\nimport WordsPerMin from '../../Components/WordsPerMin/WordsPerMin.js';\nimport LoadingBar from '../../Components/LoadingBar/LoadingBar.js';\nimport { socket } from \"../../services.js\";\nimport './Multiplayer.css';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nexport default function Multiplayer(props) {\n  _s();\n\n  const [usersPercent, setUsersPercent] = useState(0);\n  const [score, setScore] = useState(0);\n  const [registeredUser, setUser] = useState(\"user\" + getRandomInt(100));\n  const [playerResponse, setPlayerResponse] = useState([]);\n  const [currentPlayers, setCurrentPlayers] = useState([]);\n  const [amountPlayers, setAmountPlayers] = useState(0);\n  useEffect(() => {\n    setUser(props.parentUser);\n  }, [props]);\n  useEffect(() => {\n    socket.emit('joinRoom', [registeredUser, 1]);\n  }, []);\n  useEffect(() => {\n    socket.on('message', message => {\n      if (!exists(currentPlayers, message[0])) {\n        var temp = currentPlayers;\n        temp.push(message);\n        setCurrentPlayers(temp);\n        setAmountPlayers(temp.length);\n      } else {\n        var temp = currentPlayers.length;\n\n        for (var k = 0; k < temp; k++) {\n          if (currentPlayers[k][0] == message[0]) {\n            currentPlayers[k][1] = message[1];\n          }\n        }\n      }\n\n      console.log(currentPlayers);\n    });\n    socket.emit('chatMessage', usersPercent);\n  }, [usersPercent]);\n\n  function exists(arr, search) {\n    return arr.some(row => row.includes(search));\n  }\n\n  function getRandomInt(max) {\n    return Math.floor(Math.random() * max);\n  }\n\n  useEffect(() => {\n    var temp = 0;\n\n    if (currentPlayers.length > temp) {\n      temp = currentPlayers.length;\n      console.log(\"new player\");\n      console.log(currentPlayers);\n      console.log(currentPlayers.length);\n    }\n  }, [currentPlayers]);\n\n  function getLoadingBars() {\n    let temp = [];\n\n    for (var i = 0; i < amountPlayers; i++) {\n      temp.push( /*#__PURE__*/_jsxDEV(LoadingBar, {\n        userName: currentPlayers[i][0],\n        loadingData: currentPlayers[i][1]\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 67,\n        columnNumber: 17\n      }, this));\n    }\n\n    return temp;\n  }\n\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"Multiplayer\",\n    children: [/*#__PURE__*/_jsxDEV(Navbar, {\n      fName: props.parentUser\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 74,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"Multiplayer-container\",\n      children: [getLoadingBars(), /*#__PURE__*/_jsxDEV(\"h3\", {\n        children: \" You \"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 77,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(LoadingBar, {\n        userName: registeredUser,\n        loadingData: usersPercent\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 78,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(WordsPerMin, {\n        setScore: setScore,\n        setUsersPercent: setUsersPercent\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 79,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 75,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 73,\n    columnNumber: 5\n  }, this);\n}\n\n_s(Multiplayer, \"ehuuqi9Ysy1yo/RuFaHrvUr9HLs=\");\n\n_c = Multiplayer;\n\nvar _c;\n\n$RefreshReg$(_c, \"Multiplayer\");","map":{"version":3,"sources":["/Users/trumanchan/scribing/Client/src/Pages/Multiplayer/Multiplayer.js"],"names":["React","useEffect","useMemo","useState","useRef","Navbar","socketIOClient","WordsPerMin","LoadingBar","socket","Multiplayer","props","usersPercent","setUsersPercent","score","setScore","registeredUser","setUser","getRandomInt","playerResponse","setPlayerResponse","currentPlayers","setCurrentPlayers","amountPlayers","setAmountPlayers","parentUser","emit","on","message","exists","temp","push","length","k","console","log","arr","search","some","row","includes","max","Math","floor","random","getLoadingBars","i"],"mappings":"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","sourcesContent":["import React, { useEffect, useMemo, useState, useRef } from \"react\";\nimport Navbar from '../../Components/Navbar/Navbar';\nimport socketIOClient from \"socket.io-client\";\nimport WordsPerMin from '../../Components/WordsPerMin/WordsPerMin.js';\nimport LoadingBar from '../../Components/LoadingBar/LoadingBar.js';\nimport {socket} from \"../../services.js\";\nimport './Multiplayer.css';\n\nexport default function Multiplayer(props) {\n  const [usersPercent, setUsersPercent] = useState(0);\n  const [score, setScore] = useState(0);\n  const [registeredUser, setUser] = useState(\"user\" + getRandomInt(100));\n  const [playerResponse, setPlayerResponse] = useState([]);\n  const [currentPlayers, setCurrentPlayers] = useState([]);\n  const [amountPlayers, setAmountPlayers] = useState(0);\n\n  useEffect(() => {\n    setUser(props.parentUser)\n  }, [props]);\n\n  useEffect(() => {\n    socket.emit('joinRoom', [registeredUser, 1 ]);\n  }, []);\n\n  useEffect(() => {\n    socket.on('message', (message) => {\n      if(!exists(currentPlayers,message[0])){\n        var temp = currentPlayers\n        temp.push(message);\n        setCurrentPlayers(temp);\n        setAmountPlayers(temp.length)\n      }else{\n        var temp = currentPlayers.length\n        for(var k = 0; k < temp; k++){\n            if(currentPlayers[k][0] == message[0]){\n                currentPlayers[k][1] = message[1];\n            }\n        }\n      }\n      console.log(currentPlayers)\n    });\n    socket.emit('chatMessage', usersPercent);\n  }, [usersPercent]);\n\n  function exists(arr, search) {\n    return arr.some(row => row.includes(search));\n  }\n\n  function getRandomInt(max) {\n    return Math.floor(Math.random() * max);\n  }\n\n  useEffect(() => {\n    var temp = 0;\n    if(currentPlayers.length > temp){\n      temp = currentPlayers.length\n      console.log(\"new player\")\n      console.log(currentPlayers)\n      console.log(currentPlayers.length)\n    }\n  }, [currentPlayers]);\n\n\n  function getLoadingBars(){\n    let temp = []\n    for(var i = 0; i < amountPlayers; i++){\n      temp.push(<LoadingBar userName={currentPlayers[i][0]} loadingData={currentPlayers[i][1]}/>)\n    }\n    return temp;\n  }\n\n  return (\n    <div className=\"Multiplayer\">\n      <Navbar fName={props.parentUser}/>\n      <div className=\"Multiplayer-container\">\n        {getLoadingBars()}\n        <h3> You </h3>\n        <LoadingBar userName={registeredUser} loadingData={usersPercent}/>\n        <WordsPerMin setScore={setScore} setUsersPercent={setUsersPercent}/>\n      </div>\n    </div>\n  );\n}\n"]},"metadata":{},"sourceType":"module"}